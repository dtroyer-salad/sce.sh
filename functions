#!/bin/bash
# functions - Common shell functions
# SPDX-License-Identifier: MIT
# Copyright 2021 Dean Troyer

# Ensure this is not sourced multiple times
[[ -z "$_SCE_FUNCTIONS" ]] || return 0
declare -r _SCE_FUNCTIONS=1

set -eo pipefail

FUNC_DIR=$(cd $(dirname "${BASH_SOURCE:-$0}") && pwd)

# Optional Global Config Variables
# SCE_LOG_FILE - log everything to file if set
# SCE_VERBOSE - emit reposync script logging to stdout
# SCE_DRY_RUN - do not execute RT API commands
# SCE_VERBOSE - emit RT API commands

# Set the SCE Portal and Public API endpoints if it not already set
SCE_MATRIX_URL=${SCE_MATRIX_URL:-https://matrix-rest-api.salad.com/api/v2}
SCE_PORTAL_URL=${SCE_PORTAL_URL:-https://portal-api.salad.com/api/portal}
SCE_PUBLIC_URL=${SCE_PUBLIC_URL:-https://api.salad.com/api/public}

# Set the config directory
SCE_CONFIG_DIR=${SCE_CONFIG_DIR:-$HOME/.config/sce}
[[ -d $SCE_CONFIG_DIR ]] || mkdir -p $SCE_CONFIG_DIR

# Set the cookie jar location if it is not already set
SCE_COOKIE_JAR=${SCE_COOKIE_JAR:-$SCE_CONFIG_DIR/cookie-jar}

# Set the API token if it is readable and is not already set
[[ -r $SCE_CONFIG_DIR/apikey ]] && SCE_APIKEY=${SCE_APIKEY:-$(head -1 $SCE_CONFIG_DIR/apikey)}

# Initialize the global cURL return variables
curl_STATUS=""
curl_STDEXIT=""
curl_STDOUT=""

# Save trace setting
_XTRACE_FUNCTIONS=$(set +o | grep xtrace)
set +o xtrace


# Logging Functions
# =================

# Format messages for the log file
# Always outputs message to stdout, stderr or log file
# _log level message
_log() {
    local level=$1; shift
    local msg="$((date --rfc-3339 seconds 2>/dev/null | tr ' ' 'T') || date) $level ${BASH_SOURCE[2]}: $@"

    if [[ -z $SCE_LOG_FILE ]]; then
        if [[ "$level" == "ERROR" ]]; then
            echo "$msg" >&2
        else
            echo "$msg"
        fi
    else
        echo "$msg" >> $SCE_LOG_FILE
    fi
}

# Prints line number and "message" then exits
# die $LINENO "message"
function die {
    local exitcode=$?
    set +o xtrace
    local line=$1; shift
    if [ $exitcode == 0 ]; then
        exitcode=1
    fi
    err $line "$*"
    # Give buffers a second to flush
    sleep 1
    exit $exitcode
}

# Format ERROR messages for the log file or stderr
# Preserves error code and xtrace status
# err "message"
function err {
    local exitcode=$?
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace

    _log "ERROR" "$*"

    $xtrace
    return $exitcode
}

# Format INFO messages for the log file
# Only outputs message if SCE_VERBOSE is set
# Preserves error code and xtrace status
# info message
function info {
    local exitcode=$?
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace

    [[ -n $SCE_VERBOSE ]] && _log "INFO" "$*"

    $xtrace
    return $exitcode
}

# Format messages for the log file
# Always outputs message to stdout, stderr or log file
# Preserves error code and xtrace status
# log message
function log {
    local exitcode=$?
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace

    _log "" "$*"

    $xtrace
    return $exitcode
}


# REST Functions
# ==============

# Authenticated cURL: Include API token header only if it is set
_auth_header=()
[[ -n $SCE_APIKEY ]] && _auth_header=(--header Salad-Api-Key:$SCE_APIKEY)

# JSON and other default headers
_curl_headers=(--header accept:application/json --header content-type:application/json)

# _curl <args>
# Runs cURL and sets the stdout, stderr and exit codes in global variables so the caller
# has all available
function _curl {
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace

    local _response
    local _x

    # Run cURL and return a single string containing "<stderr>\0<stdout>\0<exit-code>\0"
    # stderr contains the HTTP status code.
    # Set stderr, stdout and exit code in 3 global variables for the caller to
    # have available as needed
    local _curl_cmd="curl --silent -o - "
    {
        IFS=$'\n' read -r -d '' curl_STATUS;
        IFS=$'\n' read -r -d '' curl_STDOUT;
        IFS=$'\n' read -r -d '' curl_STDEXIT;
    } < <((printf '\0%s\0%d\0;' "$($_curl_cmd -w "%{stderr}%{response_code}" "${_curl_headers[@]}" "${_auth_header[@]}" "$@")" "${?}" 1>&2) 2>&1)
    # The above is a quoting nightmare, but the subshell MUST have no unquoted spaces in it!
    curl_STDEXIT=${curl_STDEXIT:-0};
    [[ -n $SCE_VERBOSE ]] && echo "$_curl_cmd ${_curl_headers[@]} $@" >&2
    [[ $curl_STDEXIT == 0 ]] || die $LINENO "cURL exit $curl_STDEXIT"

    $xtrace
}

# DELETE <url>
function DELETE {
    local _dry_run
    local _url=${1}
    shift

    [[ -n $SCE_DRY_RUN ]] && _dry_run=echo
    [[ -n $SCE_VERBOSE ]] && echo "_curl -X DELETE $_url $@" >&2

    $_dry_run _curl -X DELETE $_url $@
}

# GET <url>
function GET {
    local _dry_run
    local _url=${1}
    shift

    [[ -n $SCE_DRY_RUN ]] && _dry_run=echo
    [[ -n $SCE_VERBOSE ]] && echo "_curl -X GET $_url $@" >&2

    $_dry_run _curl -X GET $_url $@ >/dev/null
}

# PATCH <url> [...]
function PATCH {
    local _dry_run
    local _url=${1}
    shift

    [[ -n $SCE_DRY_RUN ]] && _dry_run=echo
    [[ -n $SCE_VERBOSE ]] && echo "_curl -X PATCH $_url $@" >&2

    $_dry_run _curl -X PATCH $_url $@
}

# POST <url> [...]
function POST {
    local _dry_run
    local _url=${1}
    shift

    [[ -n $SCE_DRY_RUN ]] && _dry_run=echo
    [[ -n $SCE_VERBOSE ]] && echo "_curl -X POST $_url $@" >&2

    $_dry_run _curl -X POST $_url $@
}

# PUT <url>
function PUT {
    local _dry_run
    local _url=${1}
    shift

    [[ -n $SCE_DRY_RUN ]] && _dry_run=echo
    [[ -n $SCE_VERBOSE ]] && echo "_curl -X PUT $_url $@" >&2

    $_dry_run _curl -X PUT $_url $@
}


# SCE API Primitives
# ==================

# Auth Tokens

# Generate_instance_log_stream_auth_token
# _sce_generate_log_auth_token <cg-name> <instance-id>
function _sce_generate_log_auth_token {
    POST "$SCE_PORTAL_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}/instances/${2}/generate-log-stream-auth-token" --cookie $SCE_COOKIE_JAR
}

# _sce_get_apikey
function _sce_get_apikey {
    GET "$SCE_PORTAL_URL/users/apikey" --cookie $SCE_COOKIE_JAR
}

# sce_get_apikey
function sce_get_apikey {
    _sce_get_apikey | jq -r '"\(.key)"'
}

# _sce_login <email> <password>
function _sce_login {
    # body: email, password
    local _data="{\"email\":\"$1\",\"password\":\"$2\"}"
    POST "$SCE_PORTAL_URL/users/login" --cookie-jar $SCE_COOKIE_JAR --data "$_data"
}

# Container Groups

# _sce_delete_container_group <cg-name>
function _sce_delete_container_group {
    # <cg-name>
    DELETE "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}"
}

# _sce_get_container_group <cg-name>
function _sce_get_container_group {
    # <cg-name>
    GET "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}"
}

# _sce_get_dns <cg-name>
function _sce_get_dns {
    :
}

# _sce_list_container_groups
function _sce_list_container_groups {
    # (no args)
    GET "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers"
}

# _sce_lookup_container_group <cg-name>
function _sce_lookup_container_group {
    # <cg-name>
    GET "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}"
    curl_STDOUT=$(echo $curl_STDOUT | jq -r .id)
}

# _sce_set_container_group
function _sce_set_container_group {
    local _x_curl="_curl --header accept:application/json --header content-type:application/merge-patch+json ${SCE_APIKEY:+-H Salad-Api-Key:$SCE_APIKEY} "
    # <cg-name> <data-filename>
    # PATCH "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}" --data @${2}

    [[ -n $SCE_DRY_RUN ]] && _dry_run=echo
    [[ -n $SCE_VERBOSE ]] && echo "_curl -X PATCH "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}" --data @${2}" >&2
    $_dry_run $_x_curl -X PATCH "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}" --data @${2}
}

# Jobs

# _sce_list_queue_jobs <queue-name>
function _sce_list_queue_jobs {
    # <queue-name>
    GET "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/queues/${1}/jobs"
}

# Queues

# _sce_delete_queue <queue-name>
function _sce_delete_queue {
    # <queue-name>
    DELETE "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/queues/${1}"
}

# _sce_list_queues
function _sce_list_queues {
    # (no args)
    GET "$SCE_PORTAL_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/queues" --cookie $SCE_COOKIE_JAR
    # GET "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/queues"
}

# Nodes

# _sce_node_list <user-id>
function _sce_node_list {
    if [[ -z ${SCE_SUPPORT_TOKEN} ]]; then
        die $LINENO "Please set SCE_SUPPORT_TOKEN to continnue"
    fi
    token_header='Authorization:Bearer '$SCE_SUPPORT_TOKEN
    [[ -z $SCE_DRY_RUN ]] && _auth_header=(--header "$token_header")
    GET "$SCE_MATRIX_URL/matrix/nodes/?userId=${1}"
}

# _sce_node_set_workload <node-ip> <workload-ip>
function _sce_node_set_workload {
    if [[ -z ${SCE_SUPPORT_TOKEN} ]]; then
        die $LINENO "Please set SCE_SUPPORT_TOKEN to continnue"
    fi
    token_header='Authorization:Bearer '$SCE_SUPPORT_TOKEN
    [[ -z $SCE_DRY_RUN ]] && _auth_header=(--header "$token_header")
    # POST {{matrix_rest_api_base_url}}/api/v2/matrix/nodes/:nodeId/set-workload/:workloadId
    POST "$SCE_MATRIX_URL/matrix/nodes/${1}/set-workload/${workload}"
}

# _sce_node_show <node-id>
function _sce_node_show {
    if [[ -z ${SCE_SUPPORT_TOKEN} ]]; then
        die $LINENO "Please set SCE_SUPPORT_TOKEN to continnue"
    fi
    token_header='Authorization:Bearer '$SCE_SUPPORT_TOKEN
    [[ -z $SCE_DRY_RUN ]] && _auth_header=(--header "$token_header")
    GET "$SCE_MATRIX_URL/matrix/nodes/${1}"
}

# Servers

# _sce_list_servers  (list_container_group_instances)
function _sce_list_servers {
    # <cg-name>
    GET "$SCE_PUBLIC_URL/organizations/${SCE_ORG}/projects/${SCE_PROJ}/containers/${1}/instances"
}


# Misc Functions
# ==============

# Prompt for password
function read_password {
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace
    var=$1; msg=$2
    pw=${!var}

    # If the password is not defined yet, proceed to prompt user for a password.
    if [ ! $pw ]; then
        pw=" "
        while true; do
            echo -n "$msg "
            read -s $var
            echo -e "\n"
            pw=${!var}
            [[ "$pw" = "$(echo $pw | tr -cd '[[:alnum:]&&[:punct:]]')" ]] && break
            echo "Invalid chars in password.  Try again:"
        done
        eval "$var=$pw"
    fi

    # restore previous xtrace value
    $xtrace
}

# Normalize many variations of boolean True and False
function trueorfalse {
    local default=$1

    if [[ -z $2 ]]; then
        die $LINENO "variable required for second arg"
    fi

    local testval=${!2:-}
    case "$testval" in
        "1" | [yY]es | "YES" | [tT]rue | "TRUE" ) echo "True" ;;
        "0" | [nN]o | "NO" | [fF]alse | "FALSE" ) echo "False" ;;
        * )                                       echo "$default" ;;
    esac
}

# Restore xtrace
$_XTRACE_FUNCTIONS
